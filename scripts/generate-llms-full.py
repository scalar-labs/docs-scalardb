#!/usr/bin/env python3
"""
Generate llms-full.txt by using gitingest instead of docusaurus-plugin-llms
"""

import asyncio
import os
import subprocess
import sys
from pathlib import Path

# Add the project root to the Python path.
project_root = Path(__file__).parent.parent
sys.path.insert(0, str(project_root))

def install_gitingest():
    """Install gitingest package using pip."""
    try:
        print("üì¶ Installing gitingest...")
        subprocess.check_call([sys.executable, "-m", "pip", "install", "gitingest"])
        print("‚úÖ gitingest installed successfully")
        return True
    except subprocess.CalledProcessError as e:
        print(f"‚ùå Failed to install gitingest: {e}")
        return False

# Try to import gitingest, install if not available
try:
    from gitingest import ingest_async
except ImportError:
    print("‚ö†Ô∏è gitingest not found, attempting to install...")
    if install_gitingest():
        try:
            from gitingest import ingest_async
            print("‚úÖ gitingest imported successfully after installation")
        except ImportError:
            print("‚ùå Failed to import gitingest even after installation")
            print("Manual installation may be required:")
            print("  pip install gitingest")
            print("  # or")
            print("  pipx install gitingest")
            sys.exit(1)
    else:
        print("‚ùå gitingest installation failed")
        print("Manual installation required:")
        print("  pip install gitingest")
        print("  # or")
        print("  pipx install gitingest")
        sys.exit(1)


async def generate_llms_full():
    """Generate llms-full.txt by using gitingest."""
    try:
        print("Generating llms-full.txt by using gitingest...")

        # Current repository path
        repo_path = Path(__file__).parent.parent
        build_dir = repo_path / "build"
        build_dir.mkdir(exist_ok=True)

        # Configure the gitingest parameters.
        include_patterns = {
            "docs/*.mdx", "docs/**/*.mdx", "src/components/en-us/*.mdx", "src/components/en-us/**/*.mdx"
        }

        exclude_patterns = {
            "node_modules/*", ".git/*", "build/*", 
            "*.log", ".next/*", "dist/*", ".docusaurus/*"
        }

        # Generate content by using gitingest.
        summary, tree, content = await ingest_async(
            str(repo_path),
            max_file_size=102400, # 100KB max file size
            include_patterns=include_patterns,
            exclude_patterns=exclude_patterns,
            include_gitignored=False
        )

        # Create a header that matches your current format.
        header = """# ScalarDB Documentation - Full Repository Context
        # Generated by using GitIngest for AI/LLM consumption
        # Cloud-native universal transaction manager
        # Website: https://scalardb.scalar-labs.com

        """

        # Combine all sections.
        full_content = header + summary + "\n\n" + tree + "\n\n" + content

        # Write to the build directory.
        output_path = build_dir / "llms-full.txt"
        with open(output_path, 'w', encoding='utf-8') as f:
            f.write(full_content)

        print(f"‚úÖ llms-full.txt generated successfully at {output_path}")
        print(f"üìä Summary: {len(full_content)} characters, estimated tokens: {len(full_content.split())}")

    except Exception as error:
        print(f"‚ùå Error generating llms-full.txt: {error}")
        sys.exit(1)

if __name__ == "__main__":
    asyncio.run(generate_llms_full())
